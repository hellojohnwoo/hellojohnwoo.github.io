{"pages":[{"title":"","text":"About Meこんにちは。私の名前はジョンと申します。現在、東京でSoftware Engineerとして働いています。 ENFP(16Personalities) あたたかく情熱的で活気にあふれ、才能豊かで想像力に富む。 温情的で創意的で常に新しい可能性を探り出すタイプだ。 問題解決に素早い関心のある仕事は何でもやり遂げる能力と情熱がある。 他の人々に関心を持ち、人々をうまく扱い、優れた洞察力でサポートする。 繰り返される日常的なことに耐え切れず、情熱が出ない。 また、一つの仕事を終わらせる前に、いくつかの他の仕事をまた行う傾向がある。 洞察力と創意力が要求されないことには興味を感じられず、熱性を呼び起こすことができない。 Evaluation(POSTECH研究室の同僚たちによる私に対する評価、研究所の壁面にあった足跡の記録に書かれていたこと。) ジョンに対する私の第一印象は、毎朝6時に出勤する誠実マンだっだ。彼は夜中の1時に退勤して、どうして毎朝6時に出勤することができるのか謎だった。 - C.H ジョンは常にチームメンバーを元気づけるムードメーカーだった。 - S.H 私はジョンの二つの姿に驚いた。ジョンはチームメンバーたちとの討論する時、過熱した雰囲気を落ち着かせたり楽しい方向に向ける能力があった。 その点で，私は彼をおもしろい人だと思っていたが、集中して仕事をする時は一言も言わず、瞳はコード作りに集中していた。目からレーザーが出るかと思った。 - S.W Local(住んだことのある都市) Tokyo, Japan Chiba, Japan Seoul, Korea Pohang, Korea Istanbul, Turkey Connecticut, USA Massachusetts, USA California, USA Language(言語) Korean Japanese (JLPT N1) English (TOEIC 870; Before 5years) The School where one Studied(修学した学校) Seoul National University, Korea （ソウル大学校） Academic Credit Bank System, Korea (単位銀行制) POSTECH, Korea (ポステク) Massachusetts Institute of Technology (M.I.T), USA (聴講生の資格で、1学期の間修学) Programming Language(使ったことがあるプログラミング言語) Java(Spring) Python(Django, Flask, Tensorflow) JavaScript(React, Vue, Node) Php(Laravel) C C++ Html, CSSI think it can be developed without major problems, but the front end changes too quickly.(大きな問題なく開発できると考えているが、フロントエンドはトレンドが速く変わるので、勉強中) DB MySQL(MariaDB) PostgreSQL Oracle License(所有資格証) DataArchitect SemiExpert Network Manager(grade level 2) SQL developer Etc IQ : 133 (sd15, top 1.391%) In the past, I used to raise three dogs and tropical fish.(もともと子犬3匹と熱帯魚を飼っていました。) In the past, after finishing my master’s degree in AI graduate school in Korea, I was going to go to the United States and go to the Ph &amp; PhD.(以前、韓国のAI大学院で修士号を取った後、アメリカに行って博士号を取るつもりでした。) I’m satisfied with my life as a Software Engineer now, and I’m thinking tonight to solve the problems of the world.(現在は、Software Engineerとしての暮らしに満足しながら、世の中の問題を解決するために今夜も悩んでいます。)","link":"/about/index.html"}],"posts":[{"title":"Book-Review-Architecture-Patterns-with-Python","text":"ほとんどの開発者は、ドメインモデルを見たことがなく、データモデルだけを見ています。 ‘Most developers have never seen a domain model, only a data model.’ Cyrille Martraire, DDD EU 2017 驚くほど面白くて有益な本だった。 デベロッパーとして働くようになると、各種業務を担当することになる。 製造、テスト、お客様との商談など···そうしているうちにアーキテクチャの設計に対して自らレベルアップしているのかという疑問が湧いてくる。もちろん、大部分のデベロッパーは忙しい日程に追われる場合が多い。 軽量フレームワークであるflaskでアーキテクトへの負担は抑えつつ、説明はとても親切だ。 特にモデリングについての案内は逸品だ。(カラー) 残念な点といえば、チャプターの始まりには常にリアルライフについての長い説明。 Etc 大企業などで使われるSAPが、自社CloudサービスをNodeJSとFlashを利用して簡単に利用できるという。かなり印象的だ。","link":"/2020/05/30/Book-Review-Architecture-Patterns-with-Python/"},{"title":"Docker 01_What is Docker","text":"なぜDockerを使うのか? 最も簡単に説明すれば、パフォーマンスが良いからですね。 簡単に言えば、途中で不必要なレイヤーをなくしたと思いましょう。 Dockerの特徴 LXC(リナックスコンテナズ)というカーネルコンテナ技術を利用して作ったコンテナ技術のひとつ。もちろん、今はLXCに全面的に依存してはいないが、LXCオプションなどが使えることを勘案すれば、最初から分離された別個の技術とは言えない。 運営体制を仮想化しないコンテナ技術だけに、仮想マシンに比べて軽く、VMを含めて1台のサーバーに複数のサービスを駆動しやすい。 セキュリティ上、サービスがハッキングされても元のサーバに影響を与えにくい隔離された構造であるため、仮想化のメリットをかなり活用できる。 仮想マシン(VM)とは異なり、既存のリナックスリソース(ディスク、ネットワークなど)をそのまま活用できるため、複数のサービスを一つのサーバーにすべて運用するにも便利である。 Linuxカーネル2.6.32-431以上でサポートする。 CentOS 基準では、CentOS 6.5 以上を要求する。(バックエンドデベロッパーなら、基本的にインフラ運用も可能になるべきだと思うので、CentOS6の勉強や運用をしていて、6.5以上バージョンを使っています！) まずは、言葉の整理していきましょう！仮想化(Virtualization) コンピューティングにおいて、仮想化とは、仮想コンピュータハードウェアプラットフォーム、ストレージデバイス、およびコンピュータネットワークリソースを含む、何かの仮想バージョンを作成する行為を指します。 In computing, virtualisation refers to the act of creating a virtual (rather than actual) version of something, including virtual computer hardware platforms, storage devices, and computer network resources.(ps.2015年1月25日、TOEIC870点、もう5年前なので英語の実力が減少した可能性が高いです。(笑)) 仮想マシン(Virtual Machine、VM) 物理的ハードウェアシステムに構築され、独自のCPU、メモリ、ネットワークインターフェース、およびストレージを備え、仮想コンピュータシステム機能をする仮想環境です。 ハイパーバイザー(Hypervisor) ホストシステムで多数のゲストOSを駆動できるようにするソフトウェア。 ハードウェアを仮想化しながらハードウェアとそれぞれのVMをモニタリングする中間管理者。 VMM(Virtual Machine Monitor)とも呼ばれる。 VM VS Docker VM VS Docker(Container)関連論文 : https://arxiv.org/pdf/1807.01842.pdf AmazonとNetflixで見るDocker(Container) あの小さな緑、青の点が1つのコンテナ(pc)だ。数多くのコンテナが集まって、一つのサービスを提供しています。 このようなサービスを実現するのに、非常に多くの時間がかかる。このようなサービスがDependencyなく、1つのサービスとして実装、運営されているということはかなり難しいことである。 しかし、このようなことができる理由は、マイクロサービスを使用するために、コンテナの使用にこのようなサービスが実現、運営可能となった。 コンテナ技術を導入することにより、複雑度の削減、ビルドタイムの削減などが可能となり、運営チームは運営に集中でき、開発チームは開発に集中できるようになった。 Containerを活用したMicroservices かつてはMONOLITHだったので、すべてのサービスが一つにまとまっていた。 そのおかげで開発、運営にかなり不便な点が多かったが、マイクロサービスに変わってからはそのような不便が消えつつある。 個人的な感想 軽くはLinux、Docker、AWSの活用だけど、もう少し進むなら、Kubernetesの活用だと思います。 従来はセキュリティ上の問題で、クラウドやDocker などの使用ができなかった。 (正確にはかなり制限的だった。)そのため、私が魅力的に感じる技術を活用できない喉の渇きがあった。早くこのような技術を活用できるところで働けたらと思う。それは極めて切実だ。 大学研究所で研究していた時代、私の研究室の隣の部屋はクラウドコンピューティング研究室だった。たまにコーヒーがない時、隣の部屋の研究員先輩とコーヒータイムをしながら興味深く感じた。現在ソフトウェアエンジニアとして働きながら、最も興味を感じることは何かと私に聞かれたら、当然のことながら仮想化技術だと答えるだろう。(当時私は人工知能の研究をしていた。 惜しくも経済的な事情でアメリカの大学院に行けなかった。) 仮想化(Virtualization) VS クラウド(Cloud) 仮想化は、単一の物理ハードウェアシステムで複数のシミュレーション環境や専用リソースを生成できる技術であり、 クラウドはネットワーク全体で拡張可能なリソースを抽象化し、フルリングするIT環境です。 つまり、仮想化は技術で、 クラウドは環境であることが著しい違いです。","link":"/2020/05/14/Docker-01-What-is-Docker/"},{"title":"Book Review PHP &amp; MYSQL-NOVICE TO NINJA","text":"本を読んだ後の印象 この本の一番強いところは、段落分けが明確で、説明がとても易しくて理解しやすい。番号を付けてインデックスして整理したり、太字で単語をつなげてくれる部分から著者の配慮が感じられる。(英文基準) Phpがサーバーサイドスクリプト言語であることを何度も強調する。そしてその簡単な例としてJavaScriptと比較して説明する。 Phpとウェブサーバーに対する理解を非常に分かりやすく説明してくれる。 MySQLを活用するデータベースの連動まで詳しく説明してくれている。 少し物足りない点 Laravelについての本ではない。 分かりやすいが、実習が多くはある。この本を読んだ後に、Laravelをつなげていければ、なかなかいいと思う。 個人的な感想 私にPhpとはPython、Goなどに比べて、古くて使いづらいランゲージという先入観があった。 LaravelのようなPhpフレームワークで、簡単にECサイトなどを作ることは今でも難しくないが、今回の機会を通じてPhpとLAMPのようなサーバーサイド環境について学び直せて良い時間だった。 意外とPhpコミュニティがうまく活性化されていて、いろいろ学びやすく、楽しくプログラミングできると感じる。https://laracasts.com/https://laravel.com/docs/7.x かつて主力ランゲージだったJava-Springに比べ、Php-Laravelは、そのハードルがかなり低いので、素早く学べるという感じである。Python-Djangoよりも容易に感じられる。(現在、Djangoフレームワーク相当重くなった感じがぬぐえない。) NodeJSの反対側にある言語という感じがする。(クライアント-サイド、 サーバ-サイド)","link":"/2020/05/16/Book-Review-PHP-MYSQL-NINJA/"},{"title":"Famous-Saying-2020-06-04","text":"私がこれまで成し遂げたことの多くは、私の怠けからきている - Fortan創始者、 John Backus 優れたプログラマーが備えるべき3つの徳目は”怠惰、苛立ち、うぬぼれ”だ。 誠実で粘り強い人には退屈で大変な課題を単純にする動機が生じないからだ。- Pearl創始者、 Larry Wall 未来を予測する最も良い方法は、未来を発明することだ。ソフトウェアについて本当に真剣な人たちは彼ら自身のハードウェアを作らなければならない。LISPは言語ではなく建築資材だ。- Alan Kay Cは並外れて、欠点あり、大成功だった。- C創始者、Dennis M. Ritchie “私は真のプログラマーではない。 できるまで色々試して見られたら次に移る。 真のプログラマーは”はい、できますがあちこちでメモリ漏れが発生します。 おそらく修正すべきでしょう”と語る。 私はただ要請が10回入ってくるたびにアパッチを再び始める。” - PHP創始者、Rasmus Lerdorf","link":"/2020/06/04/Famous-Saying-2020-06-04/"},{"title":"Flask-Document","text":"https://flask-docs-kr.readthedocs.io/ko/latest/ https://www.tutorialspoint.com/flask/index.htm","link":"/2020/06/05/Flask-Document/"},{"title":"Infra-Work-01-OverView","text":"私が考えるインフラエンジニアの役割 情報化社会の高度化されたITインフラを支える仕事。 過去にはビジネスの安定的な支援であったが、現在に至ってはビジネスの革新を主導する。 1. インフラエンジニアの業務 大きく分けてインフラ設計、インフラ構築、インフラ運営の3段階に分類できる。 インフラ設計 インフラを作る目的を理解しなければならない。 目的を達成するのに必要な機能や性能などを整理する。 費用と期間を予測して企画書と設計書を作成する。 責任者に決済をする。 インフラ構築 直接する場合もあり、オペレーターや外部の業者に任せる時もある。 機器の運搬と組み立て、装着、設置、設定、動作テスト、負荷テストなどに分類できる。 CE(Customer Engineer):ハードウェア関連の作業 SE(System Engineer):サーバーやストレージ設定 NE(Network Engineer):ネットワーク装置設定 このように分業化することもある。 インフラ運営 24時間、365日稼働中。 障害対応、受容量管理、インフラが原因ではなく問題の把握に分けられる。 障害対応 ハードウェア故障、急激なアクセス増加への対策、不適切な権限設定によるアクセスが不可能な状況の解消 水容量管理 アクセス数やデータ量が流動的なので、適切に調整する。 インフラが原因ではない問題の把握 プログラムのバグやアプリケーションの設定ミスかもしれない。 2. ITインフラを構成する要素## ファシリティー - 建物、施設、設備などを意味 - データセンターとデータセンターを構成するラック、エアコン、発電機、変圧器、消火設備などが含まれる。 ## サーバー、ストレージ - ITサービスを提供するサーバーとデータを大量に保存するストレージ ## ネットワーク - サーバーとストレージを接続し、インターネットに接続するネットワーク3. 技術者の観点から見るインフラエンジニア- 要請された課題に対して技術的な観点から適切な答えを提案し、実践できなければならない。 - 短期間に本質的な解決策を提示できる技術者 - 最新の動向にも精通している必要がある。サーバハードウェア- IA(Intel Architecture)サーバーとエンタープライズサーバーの2つが存在サーバーOS- Linux、Windows、Unixに集約ストレージ- ストレージ仮想化、シーンプロビジョニング、重複除去、スナップショットなど新技術が登場。 - 各技術の長所·短所を把握し、費用対効果の面で適切なストレージを選定 - ネットワークの設計と構築 - TCP/IPにほぼ集約 - ネットワーク機器 - 通信の交換 - ネットワーク機器はメーカーごとに命令体系が異なるため、メーカーごとの命令体系を学習する必要がある。4. 選定者としてのインフラエンジニア## システム構成 - どの規模でどのように構成するのか。 ## サーバ仕様選定 - CPU、メモリ、ディスク、RAID、NIC、PSUの二重化の必要性、保守年数、保守レベル、拡張性、物理的大きさ及び重量などがある。 ## ネットワーク構成 - 保証期間、メーカー、スイッチをいくつ?、収容量、二重化するかどうかなど… ## データベース設計 - RDBMS、必要容量計算、データベーススキーマと物理的なデータ配置決定 ## オペレーティングシステム - システムをどのように監視して運営するのか。 - 障害の発生をシステム感知ツールで感知し、障害発生を感知したときのみ社員が対応する。 - 一次対応はMSP業者に委任し、解決しないときに社員に問題を伝えて段階的に対応 - 別組織で24時間、365日監視運用システムを構築","link":"/2020/06/07/Infra-Work-01-OverView/"},{"title":"Git-03-Git-Reset","text":"1 ) 文字化け 123git&gt; set LC_ALL=ko_KR.UTF-8git&gt; set LC_ALL=ja_JP.UTF-8git&gt; git diff 2 ) ファイル名化け 123git&gt; git config --global --editgit&gt; git config --global code.quotepath falsegit&gt; git status 3 ) その前のコミット一つを取り消す。 123git&gt; git reset HEAD~1git&gt; git log --graphgit&gt; git status 4 ) その前のコミットに戻す。 1git&gt; git reflog 5 ) 簡略なコミットの順序 1234567new commit ↓ soft (green) ↓ red (mixed) ↓ existing commit (hard) 5 - 2 ) 12345678910git&gt; git commit -am &quot;test1&quot;git&gt; git reset HEAD~1 --softgit&gt; git status // untrackedgit&gt; git reset HEAD~1 --hardgit&gt; git status // untrackedgit&gt; git add . // trackedgit&gt; git reset --hard 6 ) IDを利用した 1git&gt; git reset ct9379a","link":"/2020/07/01/Git-03-Git-Reset/"},{"title":"Linux Basic 01_Command","text":"Commandとは？1[root@centos ~]# コマンド [-option] [argument1] [argument2] ... [argument n] man(manual page)とは？ man : コマンドの使い方、またはファイルの説明を確認する。 通常200〜300個のコマンドを持ってLinuxを管理する。 1234[root@centos ~]# man [-option] command or filename[root@centos ~]# man ls[root@centos ~]# man --help[root@centos ~]# info commmand (:q) ls ls [-option] …(ex. ls -aex. ls -a -lex. ls -al /etc)","link":"/2020/05/10/Linux-Basic-01-Command/"},{"title":"JS-01-Auto-ReUse","text":"必ず活用しなければならないライブラリ(JavaScript) FS module Commander Inquirer Crawler Puppeteer 私は職場で働く時、入社後10日目に単純なエクセル入力作業を担当するようになった。２つのウェブサイトを比較して該当するファイルをアップロードし、備考欄に状態メッセージなどを入力する作業だった。 およそ700件ほどで、 手動で処理すれば1件に10秒ほどかかり、およそ2時間（7000秒）以上がかかる作業だった。 私の上司はそれを手動で処理し、私はそれを見て同じように手動で処理した。およそ60件を終えると，面倒になり，以前知っていたマクロをダウンロードした後に，適切に修正して自動的に処理するようにした。 自動化処理をセットしておいて、コーヒーを飲みながら，次の作業に使うと仕事が楽になりそうなライブラリのリファレンスを読みながらいた上司は私のやり方に少しは驚いたように見えた。 私はエンジニアなら、単純な作業はできるだけ避けるべきだと思う。そして、残る時間にもう少し創造的に問題の本質を把握したり、解決する方法について考えるべきだと思う。","link":"/2020/06/24/JS-01-Auto-Reuse/"},{"title":"Interview Framework VS Library","text":"Framework VS Library 結論 : 誰が誰を呼び出すかの違い(who calls who) Frameworkではフレームワークコードが我がコードを呼び出し、 Libraryでは我がコードがライブラリを呼び出す。 Inversion of Control (IOC) JavaScriptフレームワークであるQueryを例に、Documentが準備状態(document on ready)の時に我々が定義したコールバックを呼び出すのはフレームワークである。これはフレームワークが担うフレームワークの統制部分の流れである。 Framework Code : 統制の流れを定義 My Code : 行動を定義 Library Code : 行動を定義 FrameworkとLibraryの違いはControlに関すること。 統制の流れ(flow of control)がその違いだ。 FrameworkはApplicationの流れをコントロールし、 Libraryはそうではない。 API (Application Programming Interface) 開発者が公に露出したメンバーを使って機能にアクセスし、当該機能を具現するのに使われたコードを隠せるインターフェース。 Library vs API Libraryはコンポーネントそのもの。 APIはコンポーネントを活用する規約。 ETCSDK(System Development Kit) ソフトウェア開発ツール集 SDKの中には開発に役立つ開発ツールプログラム、デバッグプログラム、文書、APIなどがある。 Software Framework 定義されたAPIを提供するSoftware libraryの母音 ライブラリと違い、アプリケーションの枠組みと構造を決定するだけでなく、その上に開発された開発者のコードを制御する。 Software Library コンピュータープログラムでよく使われる部分プログラムを集めたもの。 静的、動的(リンク、ロード)ライブラリに分けられる。","link":"/2020/05/12/Interview-Framework-Library/"},{"title":"JS-02-HTTP-STATUS-CODE","text":"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status","link":"/2020/06/25/JS-02-HTTP-STATUS-CODE/"},{"title":"Moment-AI-LAB","text":"POSTECH(浦項工科大学校) 情報通信研究所(AI専攻) その当時、私のルーチンはこうだ。朝6時に出勤し、夜1時に研究所から退勤する。 その当時、私は他の学生より遅い歳に、大学院に入学したので劣等感を感じて他の学生より１日１時間ずつ、もっと勉強するという考えしかなかった。 毎日、400ページ以上ある課題と毎週2回以上あるテストは本当に大変だった。それでもこの過程をうまく終えることができたのは、一緒に勉強した仲間たちがいたから可能だったと思う。 いつも夜10時にピザを食べながら、課題とテストについてフィードバックを交わした。 AI分野の世界最高水準の教授たちの論文を毎日思いっきり読んだ。アメリカの大学院に進学することについて推薦書を書いてくれる教授もいらっしゃったが、世界最高水準の論文を書くために、こんなに死ぬように勉強して研究しなければならないことに対して少しはプレッシャーを感じたりもした。。 私に対する評価(POSTECH研究室の同僚たちによる私に対する評価、研究所の壁面にあった足跡の記録に書かれていたこと。) ジョンに対する私の第一印象は、毎朝6時に出勤する誠実マンだっだ。彼は夜中の1時に退勤して、どうして毎朝6時に出勤することができるのか謎だった。 - C.H ジョンは常にチームメンバーを元気づけるムードメーカーだった。 - S.H 私はジョンの二つの姿に驚いた。ジョンはチームメンバーたちとの討論する時、過熱した雰囲気を落ち着かせたり楽しい方向に向ける能力があった。 その点で，私は彼をおもしろい人だと思っていたが、集中して仕事をする時は一言も言わず、瞳はコード作りに集中していた。目からレーザーが出るかと思った。 - S.W 韓国の大学は偏差値という概念を使わないが、普通、韓国では、ソウル大学、浦項工科大学、KAISTを同級の理工系大学と考えている。おおよそ偏差値が72以上らしい。最近は医学部の人気で、工科大学の人気がない。 POSTECH(浦項工科大学校) Wiki JapaneseLanguage","link":"/2020/06/26/Moment-AI-LAB/"},{"title":"SAP-ABAP-01-Install","text":"Preference OS : macOS Catalina 10.15.5 Container(VM) : Docker SAP Version : SAP ABAP 7.52(SAP NetWeaver ABAP Developer Edition in Docker) Docker Setting Advancedタブに入って、自分のスペックに合わせて使用環境を変更してあげましょう。ディスクボリュームは100GBをお勧めします。私は後でSAP HANAもインストールしようと思ってます。(私はポータブルSSDを利用します。) Before After","link":"/2020/06/02/SAP-ABAP-01-Install/"},{"title":"Self-Review-2020-07-01","text":"IDEの使用未熟によるバグと修正括弧の「 (V：) 」部分が問題だった。 webの開発を行うエンジニアには、JavaScriptは避けられない存在である。 過去にjqueryのような技術はほとんど見られず、現在はReactが大勢を占めている。 不安全だったJavaScriptがTypeScriptという名前に変化し(?)、より強力になった。4週間、基礎からしっかりJavaScriptの全てを学んだと思った。 ところが不思議にもきちんと文法を合わせてコードを作成したが、バグができて３時間は迷った。 WebStorm(JS)使用未熟の問題だった。有料だからいいと思っていたのにこんな問題もあったなんて…","link":"/2020/07/01/Self-Review-2020-07-01/"},{"title":"Linux Basic 02_Directory","text":"Directoryとは？ Directory：Linuxで、ファイルを入れておくことができるオブジェクト。 Linuxでは、ディレクトリ構造が木を逆さに立てた逆ツリー構造である。そして、最上位のディレクトリは 「/」 である。 これrootと呼ぶ。「/root」 はrootアカウントのホームディレクトリであり、異なることを示す。 Linux ディレクトリ 区切り文字は 「/」Windows フォルダ 区切り文字は 「¥」(Windowsは、ドライブにフォルダ構造を持つ。) Path . : current directory .. : parents directory / : root directory ~ : home directory echo $PATH Handling Files CREATE : mkdir, vi(:w filename), cat(ex. cat &gt; filename) ^D(ctrl + D), touch(ex. touch filename) COPY : cp REMOVE : rmdir, rm -r MOVE : mv RENAME : rename (ex. rename OldName NewName OldName), (ex. mv OldName NewName)Option -r : recusive(; include child dir) -i : interactive (ex. rm -i filename) (ex. cp -i SameName SameName) -f : force","link":"/2020/05/10/Linux-Basic-02-Directory/"},{"title":"Self-Review-2020-07-07","text":"Let’s Use TypeScript Java Springのサーバー開発者として半年以上働き、Python Django/Tensorflow開発者として4ヶ月以上働いた。 現在はJavaScriptフルスタック開発者を準備しているけど、JavaScriptはunsafeな言語だと思う。 大規模サービスを想定してサーバテストを行うと、JavaScriptで作成したサーバ側のコードはたまに問題が起こる。 TypeSciptを学んでからは完全に満足している。残業の心配がないよ!!","link":"/2020/07/07/Self-Review-2020-07-07/"},{"title":"Self Review 2020-05-12","text":"7日間、プログラミングの勉強時間をチェックしてみた。概要 果たして自分がどれだけ熱意を持って、能力のあるプログラマーになるために頑張っているのかを自ら評価したいと思いました。 純粋に集中した状態だけをスマートフォンのストップウォッチ機能でチェックしました。 少しでも他の雑念が入ったり、電話がかかってきたり、ネットで講義を聞いたり、休憩時間は徹底して除きました。 結論 集中時間の総合 : 37時間 49分 (秒単位を除く) 集中時間の1日平均 : 5時間 7分 (秒単位を除く) 反省 たとえ急に他のイベントが起きたとしても、自分で決めた1日最小の勉強時間5時間を守れなかった日が7日中に2日も発生したという点で、タイムマネジメントに対する不足さがうかがわれている。 午前中なるべく早く大事な部分に対する概念を勉強して、初夏の気候の午後からは、休み時間をよく守りながら体力管理を通じて集中力を上げなければならない。 実際、ノートパソコンを使う時間は1日に11時間程度だが、集中する時間は5時間7分だった。ノートパソコンの使用時間を10時間と決めておいて、1時間は有酸素運動などをして集中力向上を図らなければならない。 時間記録","link":"/2020/05/12/Self-Review-2020-05-12/"},{"title":"Work-01-Server","text":"デベロッパーの4つ業務 サーバ構築 DBスキーマ作成、環境設定 ミドル環境の設定及びミドルサーバーの構築、開発 フロントの環境設定、開発 1. サーバ構築 サーバーもコンピューターだ。 では、サーバーをなぜ構築しなければならないのか? 私はアプリやウェブサイトを作りたい。 ところであえてサーバーが必要なのか知りたいよ。 という言葉ができます。 それでは私が比喩を一つやってみます。私がコーヒー商売をすると仮定してみました。コーヒー商売をするにはどこかでコーヒー豆も積んでおいて機械も入れておかなければならない場所が必要ではないですか。このようにコーヒー商売をしても場所(site)が必要です。我々はのどの良い商業ビルや露店あるいはトラックのうち、個人の状況に当たる場所を選択することになります。コンピュータの世の中も同じです。現実で、我々がコーヒー商売をするのと似ていると思ってもいいです。仮想の世界でコーヒーを販売するためには、仮想のコーヒーを販売する場所が必要が必要なものです。整理すれば、コーヒー商売を行う場所を指してサーバーと思えばいいです。サーバーの本質は場所だと思ったらいいと思います。 Webサーバ、FTPサーバ、DBサーバ、イメージサーバ…上記のサーバー名のように、それぞれのサーバーはサーバーの目的から外れません。サーバというルーツの上に役割分担するだけです。そのため、サービスの性格によって全てのサーバーを備える必要はありません。","link":"/2020/05/27/Work-01-Server/"},{"title":"Work-02-OS","text":"オペレーティングシステム(Operating System)とは? サーバ構築という目的に運営体制は何と言えばいいでしょうか?コンピュータを制御できるようにするプログラムをオペレーティングシステムといいます。 OSの選択 Linux 長所 : 無料ということと、サーバー構築に必要な仕様が低いです。 短所 : 私たちは皆ウインドウ環境に慣れているので適応するのが難しいです。 Windows 長所 : 私たちが最も多く使うウィンドウズなので使うことに慣れています。 短所 : 有料という点と基本仕様が重いです。 Linux配布版選択 技術的な面で見れば、二人ともLinuxという共通点があるが、基本的な環境管理方式(プログラム管理)が異なります。 Linuxを基盤として配布者たちの思惑どおりネットワークや、デスクトップ環境、サーバー環境、プログラムのアップグレード方式を背中をそれぞれ最適化して配布をします。それで同じLinux基盤としても、RedhatやDebianのように、他の系列で配布になって使途も他の面があります。 プログラム的に大きく眺めると、環境設定を容易にするために使用するプログラム(パッケージ管理、セット管理)がRedhat系列とDebian系列が違います。 簡単に彼らが志向することに対し、私の考えをお知らせいたします。“Redhatは徹底的に商業化されたLinux”“Debian系列はアップデート志向なLinux” 実際にRedhat系列は、企業や証券取引所など、巨大なサービスで使用されている方です。一方、Debian系列は個人サーバ用として人気が多いです。 Redhat系列の異なる2つのLinux Fedora : Redhatの先行OS、 Redhatの新技術を体験したいならFedoraを使えばいいです。 CentOs : Redhatの以前のOS、 Redhatの安定的な技術をそのまま継承して使用します。(実際に多くの大学や大手はCentOSで運営) ps. Linuxの奇数バージョンはDevelper用で、偶数バージョンは配布型です。","link":"/2020/05/27/Work-02-OS/"},{"title":"Process-Sler-01-New-Employee","text":"【SIer新人向け】研修では教えてくれないノウハウ集https://qiita.com/old-stone/items/6221824566116710453f#3-1-%E5%BF%83%E3%81%A8%E4%BD%93%E3%81%AE%E5%81%A5%E5%BA%B7%E3%82%92%E5%A4%A7%E4%BA%8B%E3%81%AB","link":"/2020/06/24/Tip-Sler-01-New-Employee/"},{"title":"StartUp-01-Team-Building","text":"How are you going to team up?(チームをどのように作るのか？) Goal 新しくチームを作る時、どんな人を迎え入れなければならないか。 創業を必ずしも奨励するとは限りません。アメリカなどのスタートアップモデルを見ながら、協業について考えられる時間がほしくてPOSTを書きます。 Conclusion(重要度の順序)1. その人の目標実力が良くても既存チームとの目標が違えば、結局その人は去ることになっている。何よりも目標が同じかを確認しよう。 2. 既存チームとのコミュニケーション能力と社風社風と合わなければ、お互いに困ることもある。そして、コミュニケーションについては言語的な問題だと考えることもできるが、実際は人同士の性向の違いである可能性が高い。 落ち着いて説明しようとする人がいる一方、結論と理由を短く述べる人もいる。 3. 実力残念なことに、すでに良い実力を持つ人の大半が大手企業で働いている確率が高い。だからといって無理に過度な給与条件などをオファーすることはできない。個人的に一番望ましいのは、テクリーダーと学ぼうとする意志の強い新人を採用し、いち早くフィードバックのやり取りをしながら、新人に単純な修正アップデートなどを担当させるのがよいと思う。","link":"/2020/06/25/StartUp-01-Team-Building/"},{"title":"Work-03-Building-a-Server","text":"基本設定および確認 一般のウィンドウやマックなどのグイ(GUI)環境はコンピューターのリソース(Resource)を多く使うようになります。ですから、このような資源を最大限節約し、サーバ性能の最大化のために見にくいTextモードを利用することになります。 1. サーバー接続123#ssh -l ID -p Port IPcode : ssh -l root -p 43232 123.155.157.1xxroot@IP's password: セキュアシェル(Secure Shell、SSH)はネットワーク上の他のコンピュータにログインしたり、遠隔システムで命令を実行し、他のシステムでファイルを複数できるようにするアプリケーションやプロトコルを指します。強力な認証方法により、安全ではないネットワークで安全に通信できる機能を提供します。セキュアシェル(SSH)は暗号化手法を使うため、通信が露出されたとしても理解できない暗号化された文字と考えられる。 1 ) Linux Version Check 1[root@centos ~]# uname -a 2 ) CentOS Version Check 1[root@centos ~]# cat /etc/redhat-release 3 ) HardDisk Volume Check 1#df -h 123Filesystem Size Used Avail Use% Mounted on/dev/xvda1 50G 7.7G 39G 17% /tmpfs 935M 0 935M 0% /dev/shm 4 ) Memory Check 1[root@centos ~]# free -m 5 ) CPU Check 1[root@centos ~]# cat /proc/cpuinfo | grep processor | wc -l 1#cat /proc/cpuinfo 6 ) Package List Update 1[root@centos ~]# yum update 7 ) System time Setting 1[root@centos ~]# cp /usr/share/zoneinfo/Asia/Tokyo /etc/localtime","link":"/2020/05/27/Work-03-Building-a-Server/"},{"title":"Work-05-Web-Server","text":"What is Web-Server? HTTPで、ウェブブラウザから呼ぶHTML、Object(imagefileなど)を送るServiceProgram。 WebServerは２種類で、SoftwareとHardware。","link":"/2020/05/28/Work-05-Web-Server/"},{"title":"Work-04-vsftpd-FTP","text":"Why need a vsftpd? サーバの構築とサーバプログラムをアップロード/ダウンロードする目的でvsftpdをインストールします。 What is vsftpd? vsftpdはファイル転送規約(File Transfer Protocol、FTP)でファイルを円滑にアップロード/ダウンロードするのが目的です。 例えば、マイコンピュータにあるサーバにファイルをアップロードしたり、サーバにあるファイルをマイコンピュータにダウンロードしたりするためです。 サーバプログラムをアップロードしたり、その他のファイルをアップロードするためにインストールして使用します。 What is FTP? ネットワークに接続されたコンピュータ同士でデータを円滑に交換するための目的で開発されました。 簡単に例を挙げると、宅配便を必ず箱に入れて送ろうと規則を決めるようにパソコンのファイルも一つの約束をするのです。 1 ) FTP install Check 1[root@centos ~]# rpm -qa vsftpd* 2 ) Intall FTP 1[root@centos ~]# yum install vsftpd -y 3 ) FTP install Check 1[root@centos ~]# service vsftpd status 4 ) FTP Setting 1[root@centos ~]# vi /etc/vsftpd/vsftpd.conf 12345678910111213141516171819202122anonymous_enable=NO # anonymous user's connect checklocal_enable=YES # anonymous user's connect enablewrite_enable=YES # upload enablexferlog_enable=YES # ファイル転送ログの残りを許可connect_from_port_20=YES # 20ポートの使用許容xferlog_file=/var/log/xferlog # ファイル転送ログ位置設定#chroot_local_user=YES # ルートフォルダへのアクセス制限listen=YES # vsftpdデーモンの動作方式指定(yes-&gt;standalone、no-&gt;xinted)local_root=/var/www/static # 接続経路設定pam_service_name=vsftpduserlist_enable=YEStcp_wrappers=YESlisten_port=45000 # ファイル転送接続ポート設定port_enable=YESpasv_enable=YESftp_data_port=45001 # ファイル転送データポート設定pasv_min_port=45000pasv_max_port=45001session_support=YESuserlist_enable=YES # user list enable 5 ) FTP start &amp; start check 1[root@centos ~]# service vsftpd start 1[root@centos ~]# netstat -anp | grep vsftpd 6 ) When FTP reboot, auto restart setting 12[root@centos ~]# chkconfig vsftpd on[root@centos ~]# chkconfig --list | grep vsftpd 7 ) TestUser add 12[root@centos ~]# useradd testing[root@centos ~]# passwd testing 8 ) When Connect vsftpd, show this message 123456Status: Connecting to IP:PORT...Status: Connection established, waiting for welcome message...Status: Insecure server, it does not support FTP over TLS.Status: Logged inStatus: Retrieving directory listing...Status: Directory listing of &quot;.../static&quot; successful","link":"/2020/05/27/Work-04-vsftpd-FTP/"},{"title":"Youtube-01-JS-Prepare","text":"講義準備の難しさ 最近、私はJavaScriptのフルスタック開発をする講義を撮っています。 日本語で難しい概念を説明することで、ITのコミュニケーションスキルを上がることを考えたからです。 プログラミング言語は、JavaScriptに定めました。フロントエンドではReact.JSの需要が多いと考えており、これに、バックエンドでRailsやLaravelを追加したら、それならばプログラミング言語２つを用意しなければならない。(バックエンドは、Node.JS) React.JS映像を4回分撮っておいたが、サムネイルや音声編集を済ませることができなかったです。 他のスケジュールが終わり次第、アップロードしないと。","link":"/2020/06/27/Youtube-01-JS-Prepare/"}],"tags":[],"categories":[{"name":"Linux Basic","slug":"Linux-Basic","link":"/categories/Linux-Basic/"},{"name":"Book Review","slug":"Book-Review","link":"/categories/Book-Review/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"},{"name":"Famous Saying","slug":"Famous-Saying","link":"/categories/Famous-Saying/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Infra Engineer&#39;s Work","slug":"Infra-Engineer-s-Work","link":"/categories/Infra-Engineer-s-Work/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"Interview","slug":"Interview","link":"/categories/Interview/"},{"name":"Moment","slug":"Moment","link":"/categories/Moment/"},{"name":"SAP","slug":"SAP","link":"/categories/SAP/"},{"name":"Self Review","slug":"Self-Review","link":"/categories/Self-Review/"},{"name":"Developer&#39;s Work","slug":"Developer-s-Work","link":"/categories/Developer-s-Work/"},{"name":"Process","slug":"Process","link":"/categories/Process/"},{"name":"StartUp","slug":"StartUp","link":"/categories/StartUp/"},{"name":"Lecture","slug":"Lecture","link":"/categories/Lecture/"}]}